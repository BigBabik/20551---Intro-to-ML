The program contains three main files
    1. Algo.py - pythonic implementations of the algorithms in the excerise
    2. Puzzle.py - for the 8-puzzle framework
    3. Tiles.py - main file for calling algorithms and user input

The primary data structure is PuzzleState - holds information about a given puzzle state
        - board: 2D list representation of the board state
        - config: stores the flat initial configuration
        - children: holds child nodes generated from this node
        - blank_row: row index of the blank tile
        - blank_col: column index of the blank tile
        - goal: stores the goal configuration
        - cost_function: function for calculating node cost

The representation chosen for a State (and thus for the state space) is a list
of integers that are the elements on the tile board.
A transition between states is defined by the action that is taken, and the new state
is the result of that function. As a pose to the textbook, a move is defined
by the direction in which a non zero tile is moved, and not by the direction the
blank is moved to (these are always opposite). This is more intuitive in my opinion.

GBFS heuristic - Sum of all diffs of the tile from the expected value -
                 elementwise subtraction of state and goal, absoluted and summed

A* heuristic - Euclidian distance of each tile from it's square


As to the optimality of each algorithm
1. BFS - optimal result
2. IDDFS - optimal result
3. GBFS - For the config given in the excersize, The algorithm finds the optimal solution
 in general though, to is not guaranteed to find an optimal solution.
 The heuristic sums the abs values of the differences in value from the number in the tile to the number that should be there.
 It is not admissible because for a state with two adjacent tiles misplaced,
 the heuristic will give a value >= 2, even though one move may be needed.
 for example the left state will have a heuristic of 2, even though the real value is 1
 1 0 2      0 1 2
 3 4 5  ->  3 4 5
 6 7 8      6 7 8

 The heuristic is close in the form that is does capture in some sense tiles that are in the correct place
 and penalizes further away distances (values will usually differ in a greater magnitude)
 but is confounded with misplaced numbers from the same row/column

4. A* - optimal result due to admissible heuristic (euclidian distance is shorter than manhattan distance and
        manhattan distance is admissible, so by definition the euclidian heuristic is also)

The program is run as follows -

Tiles.py contains the main function and prompts for input.
It creates a Puzzle configuration instance and passes it on to a wrapper
function that calls each algorithm implementation.

Screenshots of the run output will be added to this folder